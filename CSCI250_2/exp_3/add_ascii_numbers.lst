   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Fernando Flores-Hernandez
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	add_ascii_numbers
  29 0000               
  30 0000               add_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028               
  49 0028 8C900000	        lw      $s0, 0($a0)        # first input string
  50 002c 8C910004	        lw      $s1, 4($a0)        # second input string
  51 0030 8C920008	        lw      $s2, 8($a0)        # where the result will be stored
  52 0034 8C93000C	        lw      $s3, 12($a0)       # length of the strings
  53 0038               
  54 0038 0000A820	        add     $s5, $zero, $zero
  55 003c 34170039	        li      $s7, 57            # 9 in ascii
  56 0040               
  57 0040               add_ascii:
  58 0040 10130011	        beq     $zero, $s3, done    # end iteration once we've exhausted len of string
  59 0044 2273FFFF	        addi    $s3, $s3, -1       # s3 = (len of string) - 1
  60 0048               
  61 0048 02134020	        add     $t0, $s0, $s3      # t0 = 1st input addr + last index of string
  62 004c 02334820	        add	$t1, $s1, $s3      # t1 = 2nd input addr + last index of string
  63 0050               
  64 0050 810A0000	        lb      $t2, 0($t0)        # get char at t0
  65 0054 812B0000	        lb      $t3, 0($t1)        # get char at t1
  66 0058               
  67 0058 014B6020	        add     $t4, $t2, $t3
  68 005c 01956020	        add     $t4, $t4, $s5
  69 0060 218CFFD0	        addi    $t4, $t4, -48      # 0 in ascii
  70 0064               
  71 0064 02EC682A	        slt     $t5, $s7, $t4      # if res < 48 ()
  72 0068 11A00003	        beq     $t5, $zero, skip_carry
  73 006c 218CFFF6	        addi    $t4, $t4, -10      # subtract res
  74 0070 34150001	        li      $s5, 1             # carry
  75 0074 0800001F	        j       sum_val_and_stor
  76 0078               skip_carry:
  77 0078 34150000	        li    $s5, 0               # don't carry
  78 007c               sum_val_and_stor:
  79 007c 02537820	        add     $t7, $s2, $s3
  80 0080 A1EC0000	        sb      $t4, 0($t7)
  81 0084 08000010	        j       add_ascii
  82 0088               done:
  83 0088               # ###### END STUDENT CODE BLOCK 1 ######
  84 0088               
  85 0088               #
  86 0088               # Restore registers ra and s0 - s7 from the stack.
  87 0088               #
  88 0088 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
  89 008c 8FB7001C		lw 	$s7, 28($sp)
  90 0090 8FB60018		lw 	$s6, 24($sp)
  91 0094 8FB50014		lw 	$s5, 20($sp)
  92 0098 8FB40010		lw 	$s4, 16($sp)
  93 009c 8FB3000C		lw 	$s3, 12($sp)
  94 00a0 8FB20008		lw 	$s2, 8($sp)
  95 00a4 8FB10004		lw 	$s1, 4($sp)
  96 00a8 8FB00000		lw 	$s0, 0($sp)
  97 00ac 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
  98 00b0               
  99 00b0 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE        = 00000028   
add_ascii            00000040 R  text 
add_ascii_numbers    00000000 RG text 
done                 00000088 R  text 
skip_carry           00000078 R  text 
sum_val_and_stor     0000007C R  text 
