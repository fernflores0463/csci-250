   1 0000               #
   2 0000               # FILE:         $File$
   3 0000               # AUTHOR:       P. White
   4 0000               # Contributors:
   5 0000               #		W. Carithers
   6 0000               #		K. Reek
   7 0000               #		<<<YOUR NAME HERE>>>
   8 0000               #
   9 0000               # DESCRIPTION:
  10 0000               #	This program reads up to 10 of numbers (or until the user
  11 0000               #	enters the value 9999) from the standard input, and then 
  12 0000               #	computes and prints their sum.
  13 0000               #
  14 0000               # ARGUMENTS:
  15 0000               #	None
  16 0000               #
  17 0000               # INPUT:
  18 0000               # 	The numbers to be summed.
  19 0000               #
  20 0000               # OUTPUT:
  21 0000               #	A "before" line with the 10 numbers in the order they were
  22 0000               #	entered, and an "Sum=" and then the sum of all the numbers
  23 0000               #
  24 0000               #
  25 0000               # REVISION HISTORY:
  26 0000               #	Aug  2013	- P. White converted to MIPS
  27 0000               #
  28 0000               
  29 0000               #-------------------------------
  30 0000               
  31 0000               #
  32 0000               # CONSTANTS
  33 0000               #
  34 0000               
  35 0000               MAX_SIZE= 10			# number of array elements
  36 0000               PRINT_STRING = 4		# arg for syscall to tell it to write
  37 0000               PRINT_INT = 1
  38 0000               
  39 0000               #-------------------------------
  40 0000               #
  41 0000               # DATA AREAS
  42 0000               #
  43 0000               
  44 0000               	.data
  45 0000               
  46 0000               	.align	2		# word data must be on word boundaries
  47 0000               array:	
  48 0000 00000000		.space	4*MAX_SIZE	# Reserve space for array to hold data
          00000000
          00000000
          00000000
          00000000
          00000000
  49 0028               				# the array is up to MAX_SIZE words (4byte
  50 0028               				# each). Note the array isn't initialized
  51 0028               size:
  52 0028 00000000		.word	0		# Actual number of values in the array
  53 002c               
  54 002c               	.align	0		# string data doesn't have to be aligned
  55 002c               space:	
  56 002c 2000    		.asciiz	" "
  57 002e               lf:	
  58 002e 0A00    		.asciiz	"\n"
  59 0030               before:	
  60 0030 56616C75		.asciiz	"Values entered: "
          65732065
          6E746572
          65643A20
          00      
  61 0041               sum_msg:	
  62 0041 53756D3D		.asciiz	"Sum= "
          2000    
  63 0047               prompt:	
  64 0047 456E7465		.asciiz	"Enter Number: "
          72204E75
          6D626572
          3A2000  
  65 0056               reprompt:	
  66 0056 4E756D62		.asciiz	"Number not positive.\nRe-Enter Number: "
          6572206E
          6F742070
          6F736974
          6976652E
          0A52652D
  67 007d               
  68 007d               #
  69 007d               # CODE AREAS
  70 007d               #
  71 0000               	.text			# this is program code
  72 0000               	.align	2		# instructions must be on word boundaries
  73 0000               
  74 0000               	.globl	main		# main is a global label
  75 0000               
  76 0000               # ######################################
  77 0000               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  78 0000               
  79 0000               #
  80 0000               # Name:         main
  81 0000               #
  82 0000               # Description:  EXECUTION BEGINS HERE
  83 0000               # Arguments:    none
  84 0000               # Returns:      none
  85 0000               # Destroys:     t0,t1,t2,t3
  86 0000               #
  87 0000               
  88 0000               FRAMESIZE = 8
  89 0000               main:
  90 0000               				# allocate space for the stack frame
  91 0000 23BDFFF8		addi	$sp,$sp,-FRAMESIZE	
  92 0004 AFBF0004		sw	$ra,4($sp)	# store the ra on the stack
  93 0008 AFB00000		sw	$s0,0($sp)	# store the s0 on the stack
  94 000c               
  95 000c 3C040000		la	$a0,array	# Pass the address of the array in a0
     0010 34840000
  96 0014 3405000A		li	$a1,MAX_SIZE	# and its max size in a1
  97 0018 0C000050		jal	readarray
  98 001c               
  99 001c               #
 100 001c               # The number of elements in the array is returned in v0
 101 001c               # store it into memory then print the array
 102 001c               #
 103 001c               
 104 001c 3C080000		la	$t0,size
     0020 35080000
 105 0024 AD020000		sw	$v0,0($t0)		# store num. of val. entered
 106 0028               
 107 0028 34020004		li	$v0,PRINT_STRING	# print a "Values:"
 108 002c 3C040000		la	$a0,before
     0030 34840000
 109 0034 0000000C		syscall
 110 0038               
 111 0038 0C00002B		jal	parray
 112 003c               
 113 003c               #
 114 003c               # Sum up the elements in the array
 115 003c               #
 116 003c               
 117 003c 34080000		li 	$t0,0			# t0 loop counter
 118 0040 3C090000		la	$t1,size		# t1 is number of elements read
     0044 35290000
 119 0048 8D290000	        lw  $t1,0($t1)
 120 004c 3C100000		la	$s0,array		# s0 is pointer into array
     0050 36100000
 121 0054 340A0000		li 	$t2,0			# t2 is the running total
 122 0058               	
 123 0058               sum_loop:				
 124 0058 11090005		beq	$t0,$t1,sum_loop_end
 125 005c 8E0B0000		lw	$t3,0($s0)		# read the value
 126 0060 014B5020		add	$t2,$t2,$t3		# add it to the sum
 127 0064               
 128 0064 21080001		addi	$t0,$t0,1		# increment counter
 129 0068 22100004		addi	$s0,$s0,4		# increment array pointer
 130 006c 08000016		j	sum_loop
 131 0070               sum_loop_end:
 132 0070               	
 133 0070 34020004		li	$v0,PRINT_STRING		# print "Sum=	"
 134 0074 3C040000		la	$a0,sum_msg
     0078 34840000
 135 007c 0000000C		syscall
 136 0080               
 137 0080 34020001		li	$v0,PRINT_INT	# print the sum
 138 0084 01402021		move	$a0,$t2
 139 0088 0000000C		syscall
 140 008c               
 141 008c 34020004		li	$v0,PRINT_STRING
 142 0090 3C040000		la	$a0,lf
     0094 34840000
 143 0098 0000000C		syscall			# print a newline
 144 009c               
 145 009c 8FBF0004		lw	$ra,4($sp)	# restore the registers
 146 00a0 8FB00000		lw	$s0,0($sp)	
 147 00a4 23BD0008		addi	$sp,$sp,FRAMESIZE	
 148 00a8 03E00008		jr	$ra		# return from main and exit program
 149 00ac               
 150 00ac               #
 151 00ac               # Name:         parray
 152 00ac               #
 153 00ac               # Description:  prints the "size" number of integers from the 
 154 00ac               #		array "array"
 155 00ac               # Arguments:    none
 156 00ac               # Returns:      none
 157 00ac               # Destroys:     t0,t1
 158 00ac               #
 159 00ac               
 160 00ac               parray:
 161 00ac 3C040000		la	$a0,array	# a0 is the location of the array
     00b0 34840000
 162 00b4 3C080000		la	$t0,size
     00b8 35080000
 163 00bc 8D050000		lw	$a1, 0($t0)	# a1 is the number of elements entered
 164 00c0               
 165 00c0 34080000		li	$t0,0		# i=0;
 166 00c4 00804821		move	$t1,$a0		# t1 is pointer to array
 167 00c8               pa_loop:
 168 00c8 1105000A		beq	$t0,$a1,done	# done if i==n
 169 00cc               
 170 00cc 8D240000		lw	$a0,0($t1)	# get a[i]
 171 00d0 34020001		li	$v0,PRINT_INT
 172 00d4 0000000C		syscall			# print one int
 173 00d8               
 174 00d8 34020004		li	$v0,PRINT_STRING
 175 00dc 3C040000		la	$a0,space
     00e0 34840000
 176 00e4 0000000C		syscall			# print a space
 177 00e8               
 178 00e8 21290004		addi    $t1,$t1,4       # update pointer
 179 00ec 21080001		addi	$t0,$t0,1	# and count
 180 00f0 08000032		j	pa_loop
 181 00f4               done:
 182 00f4 34020004		li	$v0,PRINT_STRING
 183 00f8 3C040000		la	$a0,lf
     00fc 34840000
 184 0100 0000000C		syscall			# print a newline
 185 0104               
 186 0104 03E00008		jr	$ra
 187 0108               
 188 0108               #
 189 0108               # Name:         readnumber
 190 0108               #
 191 0108               # Description:  reads in a positive integers
 192 0108               # Arguments:    none
 193 0108               # Returns:      return the number read in (in v0)
 194 0108               # Destroys:     none
 195 0108               #
 196 0108               
 197 0108               readnumber:
 198 0108 34020004		li	$v0,PRINT_STRING
 199 010c 3C040000		la	$a0,prompt
     0110 34840000
 200 0114 0000000C		syscall			# print string
 201 0118               readloop:
 202 0118 34020005	        li      $v0,5
 203 011c 0000000C	        syscall
 204 0120               
 205 0120 28480000		slti	$t0, $v0, 0
 206 0124 11000005		beq	$t0, $zero, goodnumber
 207 0128 34020004		li	$v0,PRINT_STRING
 208 012c 3C040000		la	$a0,reprompt
     0130 34840000
 209 0134 0000000C		syscall			# print string
 210 0138 08000046		j	readloop
 211 013c               
 212 013c               goodnumber:
 213 013c 03E00008		jr $ra
 214 0140               #
 215 0140               # Name:         readarray
 216 0140               #
 217 0140               # Description:  reads in an array of integers, can read up to MAX_SIZE
 218 0140               #		elements or until the user enters the sentinal 9999 
 219 0140               # Arguments:    $a0 the address of the array
 220 0140               #		$a1 the max number of elements that can be in the array
 221 0140               # Returns:      return the number of values read in
 222 0140               # Destroys:     t0,t1,t9
 223 0140               #
 224 0140               
 225 0140               readarray:
 226 0140 23BDFFFC		addi	$sp, $sp, -4
 227 0144 AFBF0000		sw	$ra, 0($sp)	# save ra on stack
 228 0148 23BDFFFC		addi	$sp, $sp, -4
 229 014c AFB00000		sw	$s0, 0($sp)	# save s0 on stack
 230 0150 23BDFFFC		addi	$sp, $sp, -4
 231 0154 AFB10000		sw	$s1, 0($sp)	# save s1 on stack
 232 0158               
 233 0158 34100000		li	$s0,0		# t0 will hold the num. of ele. entered
 234 015c 00808821		move	$s1,$a0		# t1 is pointer to array
 235 0160               
 236 0160               ra_loop:
 237 0160 12050007		beq	$s0,$a1,ra_done	# done if num_ele == max allowed
 238 0164               
 239 0164 0C000042		jal	readnumber
 240 0168               
 241 0168 3419270F		li	$t9,9999	# sentinal to leave loop
 242 016c 10590004		beq	$v0,$t9,ra_done
 243 0170               
 244 0170 AE220000		sw	$v0,0($s1)
 245 0174               
 246 0174 22310004		addi	$s1,$s1,4	# update pointer
 247 0178 22100001		addi	$s0,$s0,1	# and increment the count
 248 017c 08000058		j	ra_loop
 249 0180               ra_done:
 250 0180 34020004		li	$v0,PRINT_STRING
 251 0184 3C040000		la	$a0,lf
     0188 34840000
 252 018c 0000000C		syscall			# print a message
 253 0190               
 254 0190 02001021		move	$v0,$s0		# return the number of values read in
 255 0194               
 256 0194 8FB10000	        lw      $s1, 0($sp)     # restore the s1 from the stack
 257 0198 23BD0004	        addi    $sp, $sp, 4
 258 019c 8FB00000	        lw      $s0, 0($sp)     # restore the s0 from the stack
 259 01a0 23BD0004	        addi    $sp, $sp, 4
 260 01a4               
 261 01a4 8FBF0000		lw	$ra, 0($sp)	# restore the ra from the stack
 262 01a8 23BD0004		addi    $sp, $sp, 4
 263 01ac 03E00008	        jr    $ra
 264 01b0               # ###### END STUDENT CODE BLOCK 1 ######
 265 01b0               # ######################################
 266 01b0               


FRAMESIZE     = 00000008   
MAX_SIZE      = 0000000A   
PRINT_INT     = 00000001   
PRINT_STRING  = 00000004   
array           00000000 R  data 
before          00000030 R  data 
done            000000F4 R  text 
goodnumber      0000013C R  text 
lf              0000002E R  data 
main            00000000 RG text 
pa_loop         000000C8 R  text 
parray          000000AC R  text 
prompt          00000047 R  data 
ra_done         00000180 R  text 
ra_loop         00000160 R  text 
readarray       00000140 R  text 
readloop        00000118 R  text 
readnumber      00000108 R  text 
reprompt        00000056 R  data 
size            00000028 R  data 
space           0000002C R  data 
sum_loop        00000058 R  text 
sum_loop_end    00000070 R  text 
sum_msg         00000041 R  data 
